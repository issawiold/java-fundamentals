/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;


import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {

    @Test void dicesRoll(){
        Library sut= new Library();
        int [] result =sut.roll(4);
        int l=0;
        for (int i = 0; i < result.length; i++) {
          assertFalse(result[i]<1 || result[i]>6);


    }


}
    @Test void testContainsDuplicates(){
        Library sut= new Library();
        Integer[] arr={1,2,3,4,5,5};
        boolean isDublicated=sut.containsDuplicates(arr);
        assertTrue(isDublicated);

    }
    @Test void testCalculatingAverages(){
        Library sut= new Library();
        int[] arr={1,2,3,4,5};
        double result=sut.calculatingAverages(arr);
        System.out.println(result);
        Assertions.assertEquals(3.0,result);
    }
    @Test void testTheLowestAverageArr(){
        Library sut= new Library();
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        int [] expectedValue={55, 54, 60, 53, 59, 57, 61};
        int [] arrWithLowestAvg=sut.theLowestAverageArr(weeklyMonthTemperatures);
        Assertions.assertArrayEquals(expectedValue,arrWithLowestAvg);
    };

    private final PrintStream standardOut = System.out;
    private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();

    @BeforeEach
    public void setUp() {
        System.setOut(new PrintStream(outputStreamCaptor));
    }

    @Test
    void testAnalyzeData() {
        Library sut = new Library();
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        int min = 51;
        int max = 72;

        sut.analyzeData(weeklyMonthTemperatures);

        String[] parts = outputStreamCaptor.toString().trim().split("\n");
        System.out.println(Arrays.toString(parts));
        assertEquals("High: " + max+"\r", parts[0]);
        assertEquals("Low: " + min+"\r", parts[1]);
//        Pattern pattern = Pattern.compile("\\d");
//
//        for (int i = 2; i < parts.length; i++) {
//            Matcher matcher = pattern.matcher(parts[i]);
//            System.out.println(parts[i]);
//            int num = Integer.parseInt(matcher.group(0));
//            assertTrue(min < num && num < max);
//            for (int []e:weeklyMonthTemperatures
//                 ) {
//                assertFalse(Arrays.asList(e).contains(num));
//            }
//        }

    }


    @AfterEach
    public void tearDown() {
        System.setOut(standardOut);
    }
    @BeforeEach
    public void setUp1() {
        System.setOut(new PrintStream(outputStreamCaptor));
    }
    @Test
    void testTally(){
        Library sut = new Library();
        ArrayList<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");
    sut.tally(votes);
        Assertions.assertEquals("Bush received the most votes!",outputStreamCaptor.toString().trim());
    }

}


